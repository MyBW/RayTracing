#include "Spectrum.hpp"


// CIE Illuminant D S basis functions
constexpr int nCIES = 107;

const float CIE_S_lambda[nCIES] = {
	300.000000, 305.000000, 310.000000, 315.000000, 320.000000, 325.000000, 330.000000,
	335.000000, 340.000000, 345.000000, 350.000000, 355.000000, 360.000000, 365.000000,
	370.000000, 375.000000, 380.000000, 385.000000, 390.000000, 395.000000, 400.000000,
	405.000000, 410.000000, 415.000000, 420.000000, 425.000000, 430.000000, 435.000000,
	440.000000, 445.000000, 450.000000, 455.000000, 460.000000, 465.000000, 470.000000,
	475.000000, 480.000000, 485.000000, 490.000000, 495.000000, 500.000000, 505.000000,
	510.000000, 515.000000, 520.000000, 525.000000, 530.000000, 535.000000, 540.000000,
	545.000000, 550.000000, 555.000000, 560.000000, 565.000000, 570.000000, 575.000000,
	580.000000, 585.000000, 590.000000, 595.000000, 600.000000, 605.000000, 610.000000,
	615.000000, 620.000000, 625.000000, 630.000000, 635.000000, 640.000000, 645.000000,
	650.000000, 655.000000, 660.000000, 665.000000, 670.000000, 675.000000, 680.000000,
	685.000000, 690.000000, 695.000000, 700.000000, 705.000000, 710.000000, 715.000000,
	720.000000, 725.000000, 730.000000, 735.000000, 740.000000, 745.000000, 750.000000,
	755.000000, 760.000000, 765.000000, 770.000000, 775.000000, 780.000000, 785.000000,
	790.000000, 795.000000, 800.000000, 805.000000, 810.000000, 815.000000, 820.000000,
	825.000000, 830.000000 };

const float CIE_S0[nCIES] = {
	0.040000,   3.020000,   6.000000,   17.800000,  29.600000,  42.450000,  55.300000,
	56.300000,  57.300000,  59.550000,  61.800000,  61.650000,  61.500000,  65.150000,
	68.800000,  66.100000,  63.400000,  64.600000,  65.800000,  80.300000,  94.800000,
	99.800000,  104.800000, 105.350000, 105.900000, 101.350000, 96.800000,  105.350000,
	113.900000, 119.750000, 125.600000, 125.550000, 125.500000, 123.400000, 121.300000,
	121.300000, 121.300000, 117.400000, 113.500000, 113.300000, 113.100000, 111.950000,
	110.800000, 108.650000, 106.500000, 107.650000, 108.800000, 107.050000, 105.300000,
	104.850000, 104.400000, 102.200000, 100.000000, 98.000000,  96.000000,  95.550000,
	95.100000,  92.100000,  89.100000,  89.800000,  90.500000,  90.400000,  90.300000,
	89.350000,  88.400000,  86.200000,  84.000000,  84.550000,  85.100000,  83.500000,
	81.900000,  82.250000,  82.600000,  83.750000,  84.900000,  83.100000,  81.300000,
	76.600000,  71.900000,  73.100000,  74.300000,  75.350000,  76.400000,  69.850000,
	63.300000,  67.500000,  71.700000,  74.350000,  77.000000,  71.100000,  65.200000,
	56.450000,  47.700000,  58.150000,  68.600000,  66.800000,  65.000000,  65.500000,
	66.000000,  63.500000,  61.000000,  57.150000,  53.300000,  56.100000,  58.900000,
	60.400000,  61.900000 };

const float CIE_S1[nCIES] = {
	0.020000,   2.260000,   4.500000,   13.450000,  22.400000,  32.200000,  42.000000,
	41.300000,  40.600000,  41.100000,  41.600000,  39.800000,  38.000000,  40.200000,
	42.400000,  40.450000,  38.500000,  36.750000,  35.000000,  39.200000,  43.400000,
	44.850000,  46.300000,  45.100000,  43.900000,  40.500000,  37.100000,  36.900000,
	36.700000,  36.300000,  35.900000,  34.250000,  32.600000,  30.250000,  27.900000,
	26.100000,  24.300000,  22.200000,  20.100000,  18.150000,  16.200000,  14.700000,
	13.200000,  10.900000,  8.600000,   7.350000,   6.100000,   5.150000,   4.200000,
	3.050000,   1.900000,   0.950000,   -0.000000,  -0.800000,  -1.600000,  -2.550000,
	-3.500000,  -3.500000,  -3.500000,  -4.650000,  -5.800000,  -6.500000,  -7.200000,
	-7.900000,  -8.600000,  -9.050000,  -9.500000,  -10.200000, -10.900000, -10.800000,
	-10.700000, -11.350000, -12.000000, -13.000000, -14.000000, -13.800000, -13.600000,
	-12.800000, -12.000000, -12.650000, -13.300000, -13.100000, -12.900000, -11.750000,
	-10.600000, -11.100000, -11.600000, -11.900000, -12.200000, -11.200000, -10.200000,
	-9.000000,  -7.800000,  -9.500000,  -11.200000, -10.800000, -10.400000, -10.500000,
	-10.600000, -10.150000, -9.700000,  -9.000000,  -8.300000,  -8.800000,  -9.300000,
	-9.550000,  -9.800000 };

const float CIE_S2[nCIES] = {
	0.000000,  1.000000,  2.000000,  3.000000,  4.000000,  6.250000,  8.500000,
	8.150000,  7.800000,  7.250000,  6.700000,  6.000000,  5.300000,  5.700000,
	6.100000,  4.550000,  3.000000,  2.100000,  1.200000,  0.050000,  -1.100000,
	-0.800000, -0.500000, -0.600000, -0.700000, -0.950000, -1.200000, -1.900000,
	-2.600000, -2.750000, -2.900000, -2.850000, -2.800000, -2.700000, -2.600000,
	-2.600000, -2.600000, -2.200000, -1.800000, -1.650000, -1.500000, -1.400000,
	-1.300000, -1.250000, -1.200000, -1.100000, -1.000000, -0.750000, -0.500000,
	-0.400000, -0.300000, -0.150000, 0.000000,  0.100000,  0.200000,  0.350000,
	0.500000,  1.300000,  2.100000,  2.650000,  3.200000,  3.650000,  4.100000,
	4.400000,  4.700000,  4.900000,  5.100000,  5.900000,  6.700000,  7.000000,
	7.300000,  7.950000,  8.600000,  9.200000,  9.800000,  10.000000, 10.200000,
	9.250000,  8.300000,  8.950000,  9.600000,  9.050000,  8.500000,  7.750000,
	7.000000,  7.300000,  7.600000,  7.800000,  8.000000,  7.350000,  6.700000,
	5.950000,  5.200000,  6.300000,  7.400000,  7.100000,  6.800000,  6.900000,
	7.000000,  6.700000,  6.400000,  5.950000,  5.500000,  5.800000,  6.100000,
	6.300000,  6.500000 };



BlackWalnut::XYZ BlackWalnut::SpectrumToXYZ(BlackWalnut::BaseSpectrum* S)
{
	
}

BlackWalnut::DenselySampledSpectrum BlackWalnut::D(float Temperature)
{
	float CCT = Temperature *1.4388f / 1.4380f;
	if (CCT < 4000)
	{
		BlackbodySpectrum BB = BlackbodySpectrum(CCT);
		DenselySampledSpectrum BlackBody = DenselySampledSpectrum::SampleFunction([=](float Lambda) {return BB(Lambda); });
		return BlackBody;
	}
	float x;
	if (CCT <= 7000)
		x = -4.607f * 1e9f / Pow(3, CCT) + 2.9678f * 1e6f / Square(CCT) +
		0.09911f * 1e3f / CCT + 0.244063f;
	else
		x = -2.0064f * 1e9f / Pow(3, CCT) + 1.9018f * 1e6f / Square(CCT) +
		0.24748f * 1e3f / CCT + 0.23704f;
	float y = -3 * x * x + 2.870f * x - 0.275f;

	// Interpolate D spectrum
	float M = 0.0241f + 0.2562f * x - 0.7341f * y;
	float M1 = (-1.3515f - 1.7703f * x + 5.9114f * y) / M;
	float M2 = (0.0300f - 31.4424f * x + 30.0717f * y) / M;

	std::vector<float> values(nCIES);
	for (int i = 0; i < nCIES; ++i)
		values[i] = (CIE_S0[i] + CIE_S1[i] * M1 + CIE_S2[i] * M2) * 0.01;
	std::vector<float> lambda(nCIES);
	for (int i = 0; i < nCIES; ++i)
	{
		lambda[i] = CIE_S_lambda[i];
	}
	PiecewiseLinearSpectrum dpls(lambda, values);
	return DenselySampledSpectrum(dpls);
}

namespace BlackWalnut
{
	const DenselySampledSpectrum& X()
	{
		extern DenselySampledSpectrum *x;
		return *x;
	}
	const DenselySampledSpectrum& Y()
	{
		extern DenselySampledSpectrum *y;
		return *y;
	}
	const DenselySampledSpectrum& Z()
	{
		extern DenselySampledSpectrum *z;
		return *z;
	}

	PiecewiseLinearSpectrum::PiecewiseLinearSpectrum(std::vector<float> &InLambda, std::vector<float> &InValues)
	{
		Lambda = InLambda;
		Values = InValues;
	}

}

